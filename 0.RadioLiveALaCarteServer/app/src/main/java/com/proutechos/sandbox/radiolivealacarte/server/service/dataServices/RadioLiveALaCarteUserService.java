package com.proutechos.sandbox.radiolivealacarte.server.service.dataServices;import com.proutechos.sandbox.radiolivealacarte.server.model.Program;import com.proutechos.sandbox.radiolivealacarte.server.model.UserModel;import com.proutechos.sandbox.radiolivealacarte.server.service.audioServices.recording.RecordName;import com.proutechos.sandbox.radiolivealacarte.server.service.dataServices.dataStorage.RadioLiveALaCarteDataStorage;import com.proutechos.utils.server.rest.config.exceptions.ProutechosBaseException;import java.time.*;import java.util.ArrayList;import java.util.List;import java.util.UUID;public class RadioLiveALaCarteUserService {    public String createAccount(UserModel newUser) throws ProutechosBaseException {        try {            // Create a new BankAccount            String newAccountId = UUID.randomUUID().toString();            newUser.setId(newAccountId);            // Store it            RadioLiveALaCarteDataStorage.getInstance().createAccount(newUser);            UserModel user = RadioLiveALaCarteDataStorage.getInstance().getUserById(newAccountId);            return user.getId();        } catch (ProutechosBaseException e) {            throw e;        }    }    public UserModel getUserByID(String userID) throws ProutechosBaseException {        try {            return RadioLiveALaCarteDataStorage.getInstance().getUserById(userID);        } catch (ProutechosBaseException e) {            throw e;        }    }    public String createProgram(Program newProgram) throws ProutechosBaseException {        try {            // Create a new BankAccount            String newProgramId = UUID.randomUUID().toString();            newProgram.setId(newProgramId);            // Store it            RadioLiveALaCarteDataStorage.getInstance().createProgram(newProgram);            Program program = RadioLiveALaCarteDataStorage.getInstance().getProgramById(newProgramId);            return program.getId();        } catch (ProutechosBaseException e) {            throw e;        }    }    public Program getProgramByID(String ID) throws ProutechosBaseException {        try {            return RadioLiveALaCarteDataStorage.getInstance().getProgramById(ID);        } catch (ProutechosBaseException e) {            throw e;        }    }    public Boolean doesUserExists(String userId) throws ProutechosBaseException {        try {            return RadioLiveALaCarteDataStorage.getInstance().doesUserExists(userId);        } catch (ProutechosBaseException e) {            throw e;        }    }    public void deleteProgram(String programId) throws ProutechosBaseException {        try {            RadioLiveALaCarteDataStorage.getInstance().deleteProgram(programId);        } catch (ProutechosBaseException e) {            throw e;        }    }    public void addUserProgram(String userId, String programId) throws ProutechosBaseException {        try {            RadioLiveALaCarteDataStorage.getInstance().addUserProgram(userId, programId);        } catch (ProutechosBaseException e) {            throw e;        }    }    public Program[] getProgramsByUserId(String userId) throws ProutechosBaseException {        try {            return RadioLiveALaCarteDataStorage.getInstance().getProgramsByUserId(userId);        } catch (ProutechosBaseException e) {            throw e;        }    }    public List<Program> getProgramsByRadioName(String inputRadioName) throws ProutechosBaseException {        try {            return RadioLiveALaCarteDataStorage.getInstance().getProgramsByRadioName(inputRadioName);        } catch (ProutechosBaseException e) {            throw e;        }    }    public void deleteUserProgram(String idProgram, String idUser) throws ProutechosBaseException {        try {            RadioLiveALaCarteDataStorage.getInstance().deleteUserProgram(idProgram, idUser);        } catch (ProutechosBaseException e) {            throw e;        }    }    public static Boolean isHourlyAlreadyPassed(int time) {        // Convertir l'epoch en heure locale (LocalTime)        LocalTime targetTime = Instant.ofEpochSecond(time)                .atZone(ZoneId.systemDefault())                .toLocalTime();        // Heure actuelle locale        LocalTime now = LocalTime.now();        // Comparer les deux        return now.isAfter(targetTime);    }    public RecordName getSuitableFileNameByProgramId(String programId) throws ProutechosBaseException {        Program program = RadioLiveALaCarteDataStorage.getInstance().getProgramById(programId);        int startTime = program.getStartTime();        int endTime = program.getEndTime();        try {            if (isHourlyAlreadyPassed(startTime)) {                if (isHourlyAlreadyPassed(endTime)) {                    RecordName recordName = new RecordName(0, RadioLiveALaCarteDataStorage.getInstance().getFileWithoutSegmentsNameByProgramId(programId));                    return recordName;                } else {                    RecordName recordName = new RecordName(1, RadioLiveALaCarteDataStorage.getInstance().getFilesWithSegmentsBaseNameByProgramId(programId));                    return recordName;                }            }            else {                return new RecordName(0, "");            }        } catch (ProutechosBaseException e) {            throw e;        }    }    public String[] getFilesWithoutSegmentNamesList(String userId) throws ProutechosBaseException {        ArrayList<String> fileWithoutSegmentNamesList = new ArrayList<String>();        Program[] programs = this.getProgramsByUserId(userId);        for (Program program : programs) {            System.out.println(programs.toString());        }        for (Program program : programs) {            RecordName recordName = this.getSuitableFileNameByProgramId(program.getId());            if (recordName.getWithSegments() == 0 && (recordName.getOutput_name().isEmpty() == Boolean.FALSE)) {                fileWithoutSegmentNamesList.add(recordName.getOutput_name());            }        }        String[] fileWithoutSegmentNamesArray = new String[fileWithoutSegmentNamesList.size()];        fileWithoutSegmentNamesList.toArray(fileWithoutSegmentNamesArray);        return fileWithoutSegmentNamesArray;    }    public String getFileWithSegmentBaseURL(String userId) throws ProutechosBaseException {        try {            String fileWithSegmentNamesList = "";            Program[] programs = this.getProgramsByUserId(userId);            for (Program program : programs) {                RecordName recordName = this.getSuitableFileNameByProgramId(program.getId());                if (recordName.getWithSegments() == 1) {                    String name = recordName.getOutput_name();                    return name;                }            }            return "";        } catch (ProutechosBaseException e) {            throw e;        }    }    //    //    // SINGLETON    //    //    private static RadioLiveALaCarteUserService _instance = new RadioLiveALaCarteUserService();    private RadioLiveALaCarteUserService() {    }    public static RadioLiveALaCarteUserService getInstance() {        return _instance;    }}