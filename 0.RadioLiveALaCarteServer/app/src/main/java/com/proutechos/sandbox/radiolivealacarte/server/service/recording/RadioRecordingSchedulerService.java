package com.proutechos.sandbox.radiolivealacarte.server.service.recording;import org.quartz.*;import org.quartz.impl.StdSchedulerFactory;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Date;import java.util.UUID;import static org.quartz.JobBuilder.newJob;import static org.quartz.TriggerBuilder.newTrigger;public class RadioRecordingSchedulerService {    /**     *     * @throws SchedulerException     */    public void programRecording() throws SchedulerException {        // Créer une instance du scheduler        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();        // Démarrer le scheduler        scheduler.start();        // Définir le job et le lier à notre classe RadioJob        JobDetail job = newJob(RadioJob.class)                .withIdentity("radioJob", "group-"+ UUID.randomUUID().toString())  // Nommer le job                .build();        // Créer un déclencheur pour exécuter le job à 13h10 chaque jour        Trigger trigger = newTrigger()                .withIdentity("radioTrigger", "group1")  // Nommer le déclencheur                //.withSchedule(CronScheduleBuilder.dailyAtHourAndMinute(18, 07))  // Planification à 13h10 chaque jour                .startAt(new Date(System.currentTimeMillis() + 2000))                .forJob(job)  // Lier le déclencheur au job                .build();        // Ajouter le job et le trigger au scheduler        scheduler.scheduleJob(job, trigger);    }    /**     *     */    public void recordRadio() {        // Définir la commande à exécuter        String[] command = {                "ffmpeg",                "-i", "https://stream.radiofrance.fr/franceinfo/franceinfo_hifi.m3u8?id=radiofrance",                "-t", "00:00:05",                "-c:v", "copy",                "-c:a", "libmp3lame",                "/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3/sortie2092024.mp3"        };        // Créer un ProcessBuilder avec la commande        ProcessBuilder processBuilder = new ProcessBuilder(command);        try {            // Démarrer le processus            Process process = processBuilder.start();            // Lire la sortie du processus            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));            String line;            while ((line = reader.readLine()) != null) {                System.out.println(line);            }            // Lire les erreurs du processus            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));            while ((line = errorReader.readLine()) != null) {                System.err.println(line);            }            // Attendre que le processus se termine            int exitCode = process.waitFor();            System.out.println("Process exited with code: " + exitCode);        } catch (IOException | InterruptedException e) {            e.printStackTrace();        }    }    //    //    // IMPLEMENTATION    //    //    //    //    // SINGLETON    //    //    private static RadioRecordingSchedulerService _instance = new RadioRecordingSchedulerService();    public static RadioRecordingSchedulerService getInstance() {        return _instance;    }}