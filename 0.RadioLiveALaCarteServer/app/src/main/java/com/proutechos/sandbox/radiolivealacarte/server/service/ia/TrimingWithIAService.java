package com.proutechos.sandbox.radiolivealacarte.server.service.ia;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.proutechos.sandbox.radiolivealacarte.server.model.RadioStation;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Arrays;import java.util.List;public class TrimingWithIAService {    public static Float[] getTimestamps(String inputFileName) throws Exception {        try {            // Construction de l'URL en utilisant la variable camelCaseSearch            String url = "http://127.0.0.1:5000/timestamps?output_name="+inputFileName;            // Créer un objet URL            URL obj = new URL(url);            // Ouvrir la connexion HTTP            HttpURLConnection con = (HttpURLConnection) obj.openConnection();            // Définir la méthode de requête comme GET            con.setRequestMethod("GET");            // Définir les propriétés de la requête            con.setRequestProperty("User-Agent", "Mozilla/5.0");            // Vérifier le code de réponse HTTP            int responseCode = con.getResponseCode();            // Lire la réponse            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));            String inputLine;            StringBuffer response = new StringBuffer();            while ((inputLine = in.readLine()) != null) {                response.append(inputLine);            }            in.close();            // Afficher la réponse JSON            String jsonString = response.toString();            ObjectMapper objectMapper = new ObjectMapper();            List<Float> timestamps = objectMapper.readValue(jsonString, new TypeReference<List<Float>>() {            });            System.out.println(Arrays.toString(timestamps.toArray(new Float[0])));            return timestamps.toArray(new Float[0]);        } catch (Exception e) {            throw (e);        }    }    public static void trimAudioDanielMorin(String inputFileName, String outputFile) throws Exception {        // Récupérer les timestamps depuis l'API        Float[] timestamps = getTimestamps(inputFileName);        if (timestamps == null || timestamps.length != 2) {            throw new RuntimeException("Erreur : Impossible de récupérer les timestamps");        }        float startTime = timestamps[0];        float endTime = timestamps[1];        // Exécuter la commande FFmpeg        ProcessBuilder builder = new ProcessBuilder(                "ffmpeg", "-i", inputFileName,                "-ss", String.valueOf(startTime), "-to", String.valueOf(endTime),                "-c", "copy", outputFile        );        builder.redirectErrorStream(true);        Process process = builder.start();        // Lire la sortie de la commande        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {            String line;            while ((line = reader.readLine()) != null) {                System.out.println(line);            }        }        // Attendre la fin du processus        int exitCode = process.waitFor();        if (exitCode != 0) {            throw new RuntimeException("FFmpeg a échoué avec le code de sortie : " + exitCode);        }    }}