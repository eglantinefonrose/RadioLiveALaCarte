package com.proutechos.sandbox.radiolivealacarte.server.service;import com.proutechos.sandbox.radiolivealacarte.server.model.Program;import com.proutechos.sandbox.radiolivealacarte.server.model.UserModel;import com.proutechos.utils.server.rest.config.exceptions.ProutechosBaseException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Phaser;public class RadioLiveALaCarteDataStorage {    public void createAccount(UserModel userModel) throws ProutechosBaseException {        try (                // create a database connection                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                Statement statement = connection.createStatement();)        {            statement.setQueryTimeout(5);  // set timeout to 30 sec.            boolean success = statement.execute("INSERT INTO USERS(id, firstName, lastName) VALUES ('%s', '%s', '%s') ".formatted(                    userModel.getId(),                    userModel.getFirstName(),                    userModel.getLastName()                    )            );        } catch (SQLException ex) {            System.out.println("Error while creating the account");            ex.printStackTrace(System.err);            throw new ProutechosBaseException("Error while creating the account");        }    }    public Boolean doesUserExists(String userId) throws ProutechosBaseException {        try (                // Create a database connection                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                Statement statement = connection.createStatement();        ) {            statement.setQueryTimeout(5); // Set timeout to 5 seconds            // Check if the user already exists            String checkUserExistsQuery =                    "SELECT CASE WHEN EXISTS (SELECT 1 FROM USERS WHERE id = '%s') THEN 'TRUE' ELSE 'FALSE' END AS UserExists;"                            .formatted(userId);            ResultSet resultSet = statement.executeQuery(checkUserExistsQuery);            // Return true if the user exists            return resultSet.next() && Boolean.parseBoolean(resultSet.getString("UserExists"));        } catch (SQLException ex) {            System.out.println("Error while creating the account");            ex.printStackTrace(System.err);            throw new ProutechosBaseException("Error while creating the account");        }    }    public UserModel getUserById(String userId) throws ProutechosBaseException {        UserModel user = null;  // Initialisation de l'utilisateur à null        String query = "SELECT id, firstName, lastName FROM USERS WHERE id = ?";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            statement.setString(1, userId);  // Assignation de l'id de l'utilisateur            try (ResultSet resultSet = statement.executeQuery()) {                if (resultSet.next()) {  // Vérification si un résultat est retourné                    // Récupération des valeurs de l'utilisateur à partir du ResultSet                    String id = resultSet.getString("id");                    String firstName = resultSet.getString("firstName");                    String lastName = resultSet.getString("lastName");                    // Création d'une instance de User                    user = new UserModel(id, firstName, lastName);                } else {                    throw new ProutechosBaseException("User not found with id: " + userId);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching user with id " + userId);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        return user;  // Retourne l'utilisateur trouvé ou null    }    public void createProgram(Program program) throws ProutechosBaseException {        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                Statement statement = connection.createStatement();        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes.            // Insertion des données du programme dans la table PROGRAMS            String query = """            INSERT INTO PROGRAMS(id, radioName, startTimeHour, startTimeMinute, startTimeSeconds, endTimeHour, endTimeMinute, endTimeSeconds)            VALUES ('%s', '%s', %d, %d, %d, %d, %d, %d)            """.formatted(                    program.getId(),                    program.getRadioName(),                    program.getStartTimeHour(),                    program.getStartTimeMinute(),                    program.getStartTimeSeconds(),                    program.getEndTimeHour(),                    program.getEndTimeMinute(),                    program.getEndTimeSeconds()            );            boolean success = statement.execute(query);            if (success) {                System.out.println("Program created successfully");            } else {                System.out.println("Failed to create the program");            }        } catch (SQLException ex) {            System.out.println("Error while creating the program");            ex.printStackTrace(System.err);            throw new ProutechosBaseException("Error while creating the program");        }    }    public Program getProgramById(String programId) throws ProutechosBaseException {        Program program = null;  // Initialisation de l'utilisateur à null        String query = "SELECT id, radioName, startTimeHour, startTimeMinute, startTimeSeconds, endTimeHour, endTimeMinute, endTimeSeconds FROM PROGRAMS WHERE id = ?";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            statement.setString(1, programId);  // Assignation de l'id de l'utilisateur            try (ResultSet resultSet = statement.executeQuery()) {                if (resultSet.next()) {  // Vérification si un résultat est retourné                    // Récupération des valeurs de l'utilisateur à partir du ResultSet                    String id = resultSet.getString("id");                    String radioName = resultSet.getString("radioName");                    int startTimeHour = resultSet.getInt("startTimeHour");                    int startTimeMinute = resultSet.getInt("startTimeMinute");                    int startTimeSeconds = resultSet.getInt("startTimeSeconds");                    int endTimeHour = resultSet.getInt("endTimeHour");                    int endTimeMinute = resultSet.getInt("endTimeMinute");                    int endTimeSeconds = resultSet.getInt("endTimeSeconds");                    // Création d'une instance de User                    program = new Program(id, radioName, startTimeHour, startTimeMinute, startTimeSeconds, endTimeHour, endTimeMinute, endTimeSeconds);                } else {                    System.out.println("Program not found with id: " + programId);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching user with id " + programId);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        return program;  // Retourne l'utilisateur trouvé ou null    }    public void addUserProgram(String userId, String programId) throws ProutechosBaseException {        String query = "INSERT INTO USER_PROGRAM (idUser, idProgram) VALUES (?, ?)";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            UserModel userFromID = getUserById(userId);            Program programFromID = getProgramById(programId);            if ( (userFromID.getId().equals(userId)) && (programFromID.getId().equals(programId)) ) {                statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes                statement.setString(1, userId);  // Récupération de l'id de l'utilisateur                statement.setString(2, programId);  // Récupération de l'id du programme                // Exécution de la requête                int rowsAffected = statement.executeUpdate();                if (rowsAffected > 0) {                    System.out.println("User program association created successfully.");                } else {                    System.out.println("Failed to create user program association.");                }            } else {                System.out.println("Can't find program or/and user from provided ID");                throw new ProutechosBaseException();            }        } catch (SQLException ex) {            System.out.println("Error while adding user program association");            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }    }    public Program[] getProgramsByUserId(String userId) throws ProutechosBaseException {        List<Program> programs = new ArrayList<>();        String query = """        SELECT p.id, p.radioName, p.startTimeHour, p.startTimeMinute, p.startTimeSeconds,               p.endTimeHour, p.endTimeMinute, p.endTimeSeconds        FROM PROGRAMS p        JOIN USER_PROGRAM up ON p.id = up.idProgram        WHERE up.idUser = ?            """;        try (                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // set timeout to 5 seconds            statement.setString(1, userId);            try (ResultSet resultSet = statement.executeQuery()) {                while (resultSet.next()) {                    // Récupération des valeurs du programme à partir du ResultSet                    String id = resultSet.getString("id");                    String radioName = resultSet.getString("radioName");                    int startTimeHour = resultSet.getInt("startTimeHour");                    int startTimeMinute = resultSet.getInt("startTimeMinute");                    int startTimeSeconds = resultSet.getInt("startTimeSeconds");                    int endTimeHour = resultSet.getInt("endTimeHour");                    int endTimeMinute = resultSet.getInt("endTimeMinute");                    int endTimeSeconds = resultSet.getInt("endTimeSeconds");                    // Création d'une instance de Program                    Program program = new Program(id, radioName, startTimeHour, startTimeMinute, startTimeSeconds,                            endTimeHour, endTimeMinute, endTimeSeconds);                    // Ajout du programme à la liste                    programs.add(program);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching programs for user " + userId);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        Program[] programsArray = new Program[programs.size()];        programs.toArray(programsArray);        return programsArray;    }    public List<Program> getProgramsByRadioName(String inputRadioName) throws ProutechosBaseException {        List<Program> programs = new ArrayList<>();        String query = """        SELECT p.id, p.radioName, p.startTimeHour, p.startTimeMinute, p.startTimeSeconds,               p.endTimeHour, p.endTimeMinute, p.endTimeSeconds        FROM PROGRAMS p        WHERE p.radioName = ?            """;        try (                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // set timeout to 5 seconds            statement.setString(1, inputRadioName);            try (ResultSet resultSet = statement.executeQuery()) {                while (resultSet.next()) {                    // Récupération des valeurs du programme à partir du ResultSet                    String id = resultSet.getString("id");                    String radioName = resultSet.getString("radioName");                    int startTimeHour = resultSet.getInt("startTimeHour");                    int startTimeMinute = resultSet.getInt("startTimeMinute");                    int startTimeSeconds = resultSet.getInt("startTimeSeconds");                    int endTimeHour = resultSet.getInt("endTimeHour");                    int endTimeMinute = resultSet.getInt("endTimeMinute");                    int endTimeSeconds = resultSet.getInt("endTimeSeconds");                    // Création d'une instance de Program                    Program program = new Program(id, radioName, startTimeHour, startTimeMinute, startTimeSeconds,                            endTimeHour, endTimeMinute, endTimeSeconds);                    // Ajout du programme à la liste                    programs.add(program);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching programs for radio name " + inputRadioName);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        return programs;    }    public void deleteUserProgram(String idProgram, String idUser) throws ProutechosBaseException {        String query = "DELETE FROM USER_PROGRAM WHERE idProgram = ? AND idUser = ?";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            // Assignation des paramètres à la requête            statement.setString(1, idProgram);            statement.setString(2, idUser);            // Exécution de la requête            int rowsAffected = statement.executeUpdate();            if (rowsAffected > 0) {                System.out.println("User program association deleted successfully.");            } else {                System.out.println("No association found to delete.");            }        } catch (SQLException ex) {            System.out.println("Error while deleting user program association");            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }    }    public void addProgramFileNames(Program program, String fileWithoutSegmentsName, String filesWithSegmentsBaseName) throws ProutechosBaseException {        String programId = program.getId();        String query = "INSERT INTO PROGRAM_FILENAME (programId, fileWithoutSegmentsName, filesWithSegmentsBaseName) VALUES (?, ?, ?)";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            statement.setString(1, programId);  // Récupération de l'id de l'utilisateur            statement.setString(2, fileWithoutSegmentsName);  // Récupération de l'id du programme            statement.setString(3, filesWithSegmentsBaseName);  // Récupération de l'id du programme            // Exécution de la requête            int rowsAffected = statement.executeUpdate();            if (rowsAffected > 0) {                System.out.println("User program association created successfully.");            } else {                System.out.println("Failed to create user program association.");            }        } catch (SQLException ex) {            System.out.println("Error while adding user program association");            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }    }    public String getFileWithoutSegmentsNameByProgramId(String programId) throws ProutechosBaseException {        String query = "SELECT fileWithoutSegmentsName FROM PROGRAM_FILENAME WHERE programId = ?";        String fileWithoutSegmentsName = "";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            statement.setString(1, programId);  // Assignation de l'id de l'utilisateur            try (ResultSet resultSet = statement.executeQuery()) {                if (resultSet.next()) {  // Vérification si un résultat est retourné                    fileWithoutSegmentsName = resultSet.getString("fileWithoutSegmentsName");                } else {                    System.out.println("Program not found with id: " + programId);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching user with id " + programId);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        return fileWithoutSegmentsName;    }    public String getFilesWithSegmentsBaseNameByProgramId(String programId) throws ProutechosBaseException {        String query = "SELECT filesWithSegmentsBaseName FROM PROGRAM_FILENAME WHERE programId = ?";        String filesWithSegmentsBaseName = "";        try (                // Créer une connexion à la base de données                Connection connection = DriverManager.getConnection("jdbc:sqlite:/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/@db/RadioLiveALaCarteDB.db");                PreparedStatement statement = connection.prepareStatement(query);        ) {            statement.setQueryTimeout(5);  // Délai d'attente fixé à 5 secondes            statement.setString(1, programId);  // Assignation de l'id de l'utilisateur            try (ResultSet resultSet = statement.executeQuery()) {                if (resultSet.next()) {  // Vérification si un résultat est retourné                    filesWithSegmentsBaseName = resultSet.getString("filesWithSegmentsBaseName");                } else {                    System.out.println("Program not found with id: " + programId);                }            }        } catch (SQLException ex) {            System.out.println("Error while fetching user with id " + programId);            ex.printStackTrace(System.err);            throw new ProutechosBaseException();        }        return filesWithSegmentsBaseName;    }    //    //    // SINGLETON    //    //    private static RadioLiveALaCarteDataStorage _instance = new RadioLiveALaCarteDataStorage();    private RadioLiveALaCarteDataStorage() {    }    public static RadioLiveALaCarteDataStorage getInstance() {        return _instance;    }}