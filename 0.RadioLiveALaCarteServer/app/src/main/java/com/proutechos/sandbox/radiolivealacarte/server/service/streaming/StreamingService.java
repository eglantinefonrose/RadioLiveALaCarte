package com.proutechos.sandbox.radiolivealacarte.server.service.streaming;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.*;import java.util.concurrent.TimeUnit;public class StreamingService {    public void recordWithSegments(int withSegments, String url, String outputFileName, long sleepingTime) {        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());        String outputPath;        ProcessBuilder processBuilder;        Boolean withSegmentsBool;        if (withSegments == 1) {            withSegmentsBool = Boolean.TRUE;        } else {            withSegmentsBool = Boolean.FALSE;        }        //        // GESTION D'ERREURS À FAIRE ICI        //        if (withSegmentsBool) {            // Si withSegments est à TRUE, utiliser le segment time            outputPath = "/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3/" + outputFileName + "output_%04d.mp3";;            processBuilder = new ProcessBuilder(                    "ffmpeg",                    "-i", url,                    "-c:a", "libmp3lame",                    "-b:a", "192k",                    "-f", "mp3",                    "-f", "segment",                    "-segment_time", "10",                    outputPath            );        } else {            // Si withSegments est à FALSE, pas de segmentation            outputPath = "/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3/" + outputFileName;            processBuilder = new ProcessBuilder(                    "ffmpeg",                    "-i", url,                    "-c:a", "libmp3lame",                    "-b:a", "192k",                    outputPath // Spécifiez le fichier unique ici (ex : "output.mp3")            );        }        processBuilder.redirectErrorStream(true);        processBuilder.directory(new File("/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3"));        try {            Process process = processBuilder.start();            System.out.println("Enregistrement en cours dans : " + outputFileName);            Thread.sleep(sleepingTime);            // Arrêter le processus FFmpeg            process.destroy();            process.waitFor(5, TimeUnit.SECONDS);            if (process.isAlive()) {                process.destroyForcibly();            }            System.out.println("Enregistrement terminé.");            int exitCode = process.waitFor();            System.out.println("FFmpeg s'est terminé avec le code de sortie : " + exitCode);        } catch (IOException | InterruptedException e) {            e.printStackTrace();        }    }    public Integer concatene(String baseName) throws IOException, InterruptedException {        // Exemple de chemin de base pour les fichiers        String basePath = "/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3/";        String pattern = baseName + "output_";        String extension = ".mp3";        // Génère la liste des fichiers à concaténer        List<String> filesToConcatenate = getFilesToConcatenate(basePath, pattern, extension);        // Vérifie si la liste des fichiers est vide        if (filesToConcatenate.isEmpty()) {            System.out.println("Aucun fichier trouvé à concaténer.");            return -1;        }        // Crée le fichier de texte temporaire pour la concaténation avec FFmpeg        File tempFileList = createFileListForFFmpeg(filesToConcatenate);        // Vérifie si le fichier de sortie existe déjà        String outputFilePath = "/Users/eglantine/Dev/0.perso/2.Proutechos/8.RadioStreaming/0.RadioLiveALaCarteServer/app/src/main/resources/static/media/mp3/concatenated_output" + pattern + filesToConcatenate.size() + ".mp3";        if (isFileExists(outputFilePath)) {            System.out.println(outputFilePath);            System.out.println("Le fichier existe déjà");            System.out.println(filesToConcatenate.size());            return (filesToConcatenate.size());        }        // Concatène les fichiers audio avec FFmpeg        concatenateAudioWithFFmpeg(tempFileList, outputFilePath);        System.out.println(outputFilePath);        // Supprime le fichier temporaire après l'utilisation        tempFileList.delete();        return (filesToConcatenate.size());    }    public static List<String> getFilesToConcatenate(String basePath, String pattern, String extension) {        List<String> files = new ArrayList<>();        int i = 0;        // Recherche des fichiers dans le dossier        while (true) {            String fileName = basePath + pattern + String.format("%04d", i) + extension;            File file = new File(fileName);            if (file.exists()) {                System.out.println(fileName);                files.add(fileName);            } else {                break; // Sort de la boucle dès qu'un fichier est manquant            }            i++;        }        return files;    }    // Fonction pour créer un fichier de liste au format que FFmpeg attend    public static File createFileListForFFmpeg(List<String> filesToConcatenate) throws IOException {        File tempFile = File.createTempFile("filelist", ".txt");        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {            for (String file : filesToConcatenate) {                writer.write("file '" + file + "'\n");            }        }        return tempFile;    }    // Fonction pour appeler FFmpeg et concaténer les fichiers    public static void concatenateAudioWithFFmpeg(File fileList, String outputFilePath) throws IOException, InterruptedException {        // Commande FFmpeg pour concaténer les fichiers        List<String> command = new ArrayList<>();        command.add("ffmpeg");        command.add("-f");        command.add("concat");        command.add("-safe");        command.add("0");        command.add("-i");        command.add(fileList.getAbsolutePath());        command.add("-c");        command.add("copy");        command.add(outputFilePath);        // Exécute la commande FFmpeg        ProcessBuilder processBuilder = new ProcessBuilder(command);        processBuilder.inheritIO(); // Permet de voir la sortie de FFmpeg dans la console        Process process = processBuilder.start();        int exitCode = process.waitFor();        if (exitCode == 0) {            System.out.println("Concaténation réussie ! Le fichier de sortie est : " + outputFilePath);        } else {            System.out.println("Erreur lors de la concaténation des fichiers.");        }    }    // Vérifie si un fichier existe    public static boolean isFileExists(String filePath) {        File file = new File(filePath);        return file.exists();    }    //    //    // IMPLEMENTATION    //    //    //    //    // SINGLETON    //    //    private static StreamingService _instance = new StreamingService();    public static StreamingService getInstance() {        return _instance;    }}