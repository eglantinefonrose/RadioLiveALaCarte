/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.proutechos.sandbox.radiolivealacarte.server;

import ch.qos.logback.classic.Level;
import com.proutechos.utils.server.rest.config.jaxrs.JerseyConfig;
import com.proutechos.utils.server.rest.config.staticcontentserving.StaticContentServlet;
import jakarta.servlet.http.HttpServlet;
import org.apache.catalina.Context;
import org.apache.catalina.Wrapper;
import org.apache.catalina.connector.Connector;
import org.apache.catalina.startup.Tomcat;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.servlet.ServletContainer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class EntryPoint {

    /**
     *
     * @return
     */
    public String getGreeting() {
        return "Hello World!";
    }


    /**
     * Create the JerseyServlet
     * @return
     */
    private static HttpServlet createJerseyServlet() {
        ResourceConfig config = new JerseyConfig();
        HttpServlet jerseyServlet = new ServletContainer(config);
        return jerseyServlet;
    }


    /**
     * Create the JerseyServlet
     * @return
     */
    private static HttpServlet createStaticContentServlet() {
        return new StaticContentServlet();
    }


//    /**
//     * Create the JerseyServlet
//     * @return
//     */
//    private static HttpServlet createOpenAPIGeneratorConfigServlet() {
//        HttpServlet openAPIGeneratorConfigServlet = new OpenAPIGeneratorConfig();
//        return openAPIGeneratorConfigServlet;
//    }


    public static void configureLoggingProgrammatically() {
        // Get the SLF4J logger for Jetty
        Logger jerseyLogger = LoggerFactory.getLogger("org.eclipse.jetty");
        // Cast it to Logback and set its level to INFO (to reduce the Jetty verbosity)
        ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) jerseyLogger;
        logbackLogger.setLevel(Level.INFO);
    }


    /**
     *
     * @param args
     * @throws Exception
     */
    public static void main(String[] args) throws Exception {
        System.out.println(new EntryPoint().getGreeting());

        // Create a Tomcat instance and configure it to listen on port 8080
        //  - Create the Tomcat instance
        Tomcat tomcat = new Tomcat();
        //  - Create a Connector and assign it a port (and set the connector to listen on all network interfaces (0.0.0.0))
        //    Remark: Cf https://stackoverflow.com/a/71506128 on why we don't just do tomcat.setPort(8287). If we did, we would
        //            still need to call tomcat.getConnector() for a connector instance to be created and declared, which is very
        //            confusing.
        Connector zeTomcatConnector = tomcat.getConnector();
        zeTomcatConnector.setProperty("address", "0.0.0.0");
        zeTomcatConnector.setPort(8287);


        //
        //  - Jersey servlet
        //
        //    IMPORTANT: The Jersey servlet parameters are defined in the `JerseyConfig` class. This is, for instance, the
        //         case for the "jersey.config.server.provider.packages" parameter
        //
        // Define a 'context' bound to the '/' URL and add the JerseyServlet to it
        HttpServlet jerseyServlet = createJerseyServlet();
        Context jerseyContext = tomcat.addContext("", null);
        Wrapper jerseyServletWrapper = Tomcat.addServlet(jerseyContext, "jerseyServlet", jerseyServlet);
        jerseyContext.addServletMappingDecoded("/api/*", "jerseyServlet");
        jerseyServletWrapper.setLoadOnStartup(1);

        //
        //  - Static content serving
        //
        //  - Serve the static files of the Angular SPA (SinglePageApp)
        HttpServlet staticContentServlet = new StaticContentServlet();
        Wrapper staticContentServletWrapper = Tomcat.addServlet(jerseyContext, "staticContentServlet", staticContentServlet);
        jerseyContext.addServletMappingDecoded("/app/*", "staticContentServlet");
        jerseyContext.addServletMappingDecoded("/media/*", "staticContentServlet");


//        //
//        //  - Swagger Generator configuration servlet
//        //
//        //    IMPORTANT: This servlet actual serves no traffic. It is only there as a configuration mechanism via its init method.
//        //               That's the reason why there is no mapping declared for it. To access the OpenAPI description, you actually need
//        //               to go through the Jersey endpoint.
//        //
//        //               In this example, this means fetching the 'openapi.json' virtual document using the '/api' prefix and
//        //               not '/openapiGenerator').
//        //
//        //                  curl -s "http://localhost:8287/api/openapi.json" | jq .
//        //
//        //     REMARK: The contextPath has an impact on the URL from which
//        //
//        HttpServlet openAPIGeneratorServlet = createOpenAPIGeneratorConfigServlet();
//        Context openAPIGeneratorContext = tomcat.addContext("/openapiGenerator", null);
//        Wrapper openAPIGeneratorServletWrapper = Tomcat.addServlet(openAPIGeneratorContext, "openAPIGeneratorConfigServlet", openAPIGeneratorServlet);
//        openAPIGeneratorServletWrapper.setLoadOnStartup(2);


        // Start the Tomcat embedded server and wait for it
        tomcat.start();
        System.out.println(" -> Tomcat started");
        System.out.println("    Ctrl+C to stop it");
        tomcat.getServer().await();
    }

}
