/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'


    // Tomcat (embedded)
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.13'

    // Jersey
    //   - Itself
    implementation 'org.glassfish.jersey.core:jersey-server:3.1.3'
    //   - Jersey/Servlet integration (Jersery Servlet)
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.1.3'
    //   - Injection
    runtimeOnly 'org.glassfish.jersey.inject:jersey-hk2:3.1.3' // Needed to avoid "InjectionManagerFactory not found."
    //   - Jersey XML serialization with the JAXB runtime. Needed to avoid the following warnings:
    //     - "JAX-B API not found . WADL feature is disabled)"
    //     - "A class javax.activation.DataSource for a default provider MessageBodyWriter<javax.activation.DataSource> was not found. The provider is not available."
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    runtimeOnly 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.3'


    // Jackson JSON mapping
    implementation 'org.glassfish.jersey.core:jersey-client:2.33'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.13.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.2'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.13.2'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.4'
    implementation 'ch.qos.logback:logback-classic:1.3.5'

    // Database
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0' // Dépendance pour SQLite JDBC

    //testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation('junit:junit:4.13')


    // This dependency is used by the application.
    implementation 'com.google.guava:guava:33.1.0-jre'

    // Swagger (versions with support for 'jakarata.*' instead of 'javax.*')
    //   - OpenAPI generation
    implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.16'
    implementation 'io.swagger.core.v3:swagger-jaxrs2-jakarta:2.2.16'
    implementation 'io.swagger.core.v3:swagger-jaxrs2-servlet-initializer-jakarta:2.2.16'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'

    // Quartz
    implementation 'org.quartz-scheduler:quartz:2.3.2'

    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.13'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.13'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    //qoptions.compilerArgs.add("--enable-preview")
}

application {
    // Define the main class for the application.
    mainClass = 'com.proutechos.sandbox.radiolivealacarte.server.EntryPoint'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }

    // Si tu veux tout empaqueter (dépendances incluses), ce n'est pas suffisant
    // Pour un fat JAR, vois la solution 2
}

task copyRuntimeDeps(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/dependencies"
}
